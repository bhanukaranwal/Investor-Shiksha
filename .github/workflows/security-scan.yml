name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      # Frontend security scan
      - name: Run npm audit (Frontend)
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level moderate
          
      - name: Run Snyk test (Frontend)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: frontend/ --severity-threshold=medium
          
      # Backend security scan
      - name: Run npm audit (Backend)
        working-directory: backend
        run: |
          npm ci
          npm audit --audit-level moderate
          
      - name: Run Snyk test (Backend)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: backend/ --severity-threshold=medium
          
      # Python security scan
      - name: Install Python dependencies
        working-directory: ai-services
        run: |
          pip install -r requirements.txt
          pip install safety bandit
          
      - name: Run Safety check
        working-directory: ai-services
        run: safety check -r requirements.txt
        
      - name: Run Bandit security linter
        working-directory: ai-services
        run: bandit -r . -f json -o bandit-report.json
        
      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: ai-services/bandit-report.json

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,python,typescript

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker images
        run: |
          docker build -t investor-frontend:test ./frontend
          docker build -t investor-backend:test ./backend
          docker build -t investor-ai:test ./ai-services
          
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'investor-frontend:test'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'investor-backend:test'
          format: 'sarif'
          output: 'trivy-backend.sarif'
          
      - name: Run Trivy vulnerability scanner (AI Services)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'investor-ai:test'
          format: 'sarif'
          output: 'trivy-ai.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend.sarif,trivy-backend.sarif,trivy-ai.sarif'

  compliance-check:
    name: Compliance & License Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: License compatibility check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'investor-shiksha'
          path: '.'
          format: 'ALL'
          
      - name: Upload OWASP report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/

  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, secret-scan, container-scan, compliance-check]
    if: failure()
    
    steps:
      - name: Send Slack notification on security issues
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: 'ðŸš¨ Security vulnerabilities detected in Investor Shiksha platform!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
