name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run type check
        working-directory: frontend
        run: npm run type-check
        
      - name: Run linter
        working-directory: frontend
        run: npm run lint
        
      - name: Run tests
        working-directory: frontend
        run: npm run test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: backend
        run: npm ci
        
      - name: Run type check
        working-directory: backend
        run: npm run type-check
        
      - name: Run linter
        working-directory: backend
        run: npm run lint
        
      - name: Generate Prisma client
        working-directory: backend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Run database migrations
        working-directory: backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Run tests
        working-directory: backend
        run: npm run test -- --coverage --forceExit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          
      - name: Build application
        working-directory: backend
        run: npm run build

  test-ai-services:
    name: Test AI Services
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ai-services/requirements.txt
          
      - name: Install dependencies
        working-directory: ai-services
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort
          
      - name: Run linter
        working-directory: ai-services
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check code formatting
        working-directory: ai-services
        run: |
          black --check .
          isort --check-only .
          
      - name: Run tests
        working-directory: ai-services
        run: pytest --cov=. --cov-report=xml
        env:
          FLASK_ENV: testing
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./ai-services/coverage.xml
          flags: ai-services

  test-mobile:
    name: Test Mobile App
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
          
      - name: Install dependencies
        working-directory: mobile
        run: npm ci
        
      - name: Run type check
        working-directory: mobile
        run: npm run type-check
        
      - name: Run linter
        working-directory: mobile
        run: npm run lint
        
      - name: Run tests
        working-directory: mobile
        run: npm run test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,python
          
      - name: Run npm audit (Frontend)
        working-directory: frontend
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run npm audit (Backend)
        working-directory: backend
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run Safety check (Python)
        working-directory: ai-services
        run: |
          pip install safety
          safety check -r requirements.txt
        continue-on-error: true

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-services]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: us-east-1
        
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-frontend:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-backend:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push AI Services image
        uses: docker/build-push-action@v4
        with:
          context: ./ai-services
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-ai:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/investor-shiksha-ai:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-services, test-mobile, security-scan]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ CI pipeline completed successfully for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ CI pipeline failed for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
